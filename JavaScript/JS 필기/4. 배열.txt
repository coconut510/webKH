@ 배열
-> 다양한 타입의 데이터를 보관하는 변수의 모음
	- 자바, C등의 언어들은 같은 데이터 타입을 저장하는 변수들의 모음이지만
	자바스크립트는 데이터 타입이 상관 없음

-> '[]' (대괄호) 를 통해 생성과 초기화를 동시에 처리 가능함
-> 자료형 지정이 없어 모든 자료형(숫자, 문자열, 함수 , boolean, undefined, 객체 등등) 이
	데이터로 저장 가능함( 자바로 치면 컬렉션과 매우 흡사함)

var 배열명 = [값1(숫자), 값2(문자), 값3(객체)... 등등];
	-> 여러 가지 타입을 동시에 배열에 저장이 가능함.


@ 배열 선언
-> new 연산자와 Array 객체를 통한 배열 선언
-> 배열 길이를 정하지 않고 선언/ 배열 크기를 정하는 선언

## 배열의 길이를 정하지 않은 배열 선언 ##
var 변수명 = new Array();

## 배열의 길이를 정한 배열 선언 ##
var 변수명 = new Array(숫자);


## 배열의 초기값을 이용한 배열 선언 ##
var 변수명 = new Array(값1, 값2, 값3...);

## 배열의 초기값을 이용한 배열 선언2 ##
var 변수명 = [값1, 값2, 값3...];

ex)

var arr1 = new Array(1,2,3); // 초기값을 넣고 배열이 생성됨
var arr2 = [1,2,3];// new 연산자를 쓰지 않아도 배열이 자동 생성 됨
var arr3 = new Array();// 초기값을 넣지 않도록 배열을 생성할 수 있음
var arr4 = new Array(5);// 5개의 길이를 가진 배열 생성.


* new Array()로 선언시 배열의 길이는 0이 되고 데이터가 추가 될때마다
자동으로 1개씩 배열 공간이 늘어남

@ 배열의 값 대입
-> 값을 입력시에 index 번호를 활용
-> 번호 범위 0 부터 시작함(마지막은 길이의 -1번째) - 자바와 같음

var arr = new Array(5);

arr[0] = 123;
arr[1] = 234;
arr[2] = 345;
arr[3] = 456;
arr[4] = 567;

@ 배열 객체 함수
-> 자바스크립트에서 사용하는 배열도 하나의 객체이기 때문에 배열에서 활용할 수 있는
메소드가 있음

배열명.indexOf('값') 	: 배열에서 '값'이 위치한 인덱스 리턴
배열명.concat(배열명)	: 두개 또는 세개의 배열을 결합 함
배열명.join()		: 배열을 결합하고 문자열로 반환
배열명.reverse()	: 배열의 순서를 반대로 배치함
배열명.sort()		: 배열을 내림차순 또는 오름차순으로 정렬함
	- sort는 문자열을 정렬하는 함수
	- 숫자가 있어도 자동으로 문자열로 변경되어 정렬을 처리함
배열명.push('값')	: 배열의 맨 뒤에 새로운 요소를 추가
배열명.pop()		: 배열의 맨 뒤에 있는 요소를 제거함
배열명.shift()		: 배열의 맨 첫번재 요소를 제거함
배열명.unshift('값')	: 배열의 맨 앞에 새로운 요소를 추가함
배열명.toString()	: 배열을 문자열로 변환


## indexOf ##
-> 문자열을 입력하여 처음으로 나오는 위치를 반환 함


## concat ##
-> 여러개의 배열들을 결합할 때 사용하는 함수

ex)
    function arrayTest(){
            var arr1 = ['바나나','딸기','복숭아','수박'];
            var arr2 = ['햄버거','치킨','피자'];
            var arr3 = [1,2,3,4];
            var arr4 = [true, false];
            console.log(arr1);
            console.log(arr2);
            console.log(arr3);
            console.log(arr4);
            
            var arrays = arr1.concat(arr2, arr3, arr4);
            console.log(arrays);
        }

## join() ##
-> 배열을 결합하고 문자열로 반환(하나의 배열안에 있는 요소들을 하나의 문자열로 묶음)
-> join 함수 안에 있는 것을 구분자로 사용 함

ex)
 function arrayTest(){
            var arr = [1,2,3,4];
            var newArr = arr.join(' ');
            console.log(newArr);
 }


## reverse() ##
-> 배열안에 있는 요소들을 거꾸로 배치할때 사용

ex)
    <script>
        function arrayTest(){
            var arr = [1,2,3,4];
            arr.reverse();
            console.log(arr);
        }
    </script>

## sort() ##
-> 정렬할때 사용하는 함수
-> 단, 문자열로 처리되어 정렬 됨!

ex)
<script>
        function arrayTest(){
            var arr = [7,10,2,1,5,3];
            arr.sort(ASC);
            console.log(arr);
        }
        // 숫자로 정렬하고 싶을때는.
        function ASC(a,b)
        {
            return a-b;
        }
        function DESC(a,b)
        {
            return b-a;
        }
</script>

* 자바스크립트에서는 함수명을 변수에 대입해서 함수처럼 쓸수 있다.

ex)
 function arrayTest()
 {
      var a = test;
      a();
      console.log(arr);
 }
 function test()
 {
    alert("Hello");
 }

## push 와 pop ##
-> 배열 요소를 추가할때에는 push 함수를 사용 -> 뒤에서 부터 추가된다.
-> 배열 요소를 삭제할때에는 pop 함수를 사용-> 뒤에서 부터 삭제된다.
	* 실제로 push를 사용하지 않아도 자동으로 추가가 되지만 push가 표준임

ex) push

     <script>
        var arr = ['곽영훈','정지수'];
        function arrayTest(){
           arr.push(document.getElementById("text").value);
            document.getElementById("text").value=null;
            console.log(arr);
        }
        function arrayTest2()
        {
            arr.pop();
            console.log(arr);
        }
    </script>
	
## shift()와 unshift() ##
-> push와 pop처럼 요소를 추가 및 삭제하는 함수
-> 단, 마지막이 아닌 맨 처음에 추가 및 삭제하는 함수
-> shift함수가 삭제, unshift 함수가 추가.

ex)
 <script>
        var arr = ['곽영훈','정지수'];
        function arrayTest(){
           arr.unshift(document.getElementById("text").value);
            document.getElementById("text").value=null;
            console.log(arr);
        }
        function arrayTest2()
        {
            arr.shift();
            console.log(arr);
        }
    </script>


## toString() ##
-> 배열 요소를 문자열로 변경하여 출력
-> 기본적으로 배열을 출력시 자동 toString() 을 호출함

ex)
   <script>
        function arrayTest(){
            var arr =[1,2,3,4,5];
            var output = document.getElementById("p1");
            output.innerHTML = (arr.toString());
            
        }
    </script>




























































