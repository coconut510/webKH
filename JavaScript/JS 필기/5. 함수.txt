 @ 함수 선언
-> 반환형태 선언 없이 function 키워드만 이용하여 사용함
-> function 키워드에 함수명을 작성하여 생성하는 방법(선언적 함수)
-> function 에 함수명을 작성하지 않고, 변수에 대입하는 방법(익명함수)
-> 스스로 동작하는 함수(익명함수)
	- 단순한 이벤트 처리시 사용



## 선언적 함수 ##

function 함수명([매개변수]){
	처리되는 로직
	[return 되돌려줄 값;]
}

ex) 매개변수도 없고, 넘겨주는 인자값도 없는 함수

	<script>
		function test(){
		
			
		}
	</script>
   <button onclick="test();">클릭</button>
ex) 매개변수는 없지만, 인자값이 있는 경우에 처리하는 함수
	<script>
		function test(){
			console.log(arguments[0]);
		}
	</script>
   <button onclick="test(10);">클릭</button>

* 자바스크립트에서는 매개변수가 없어도 인자값을 넘겨줄 수 있음
처리할때는 arguments 라는 배열에 자동적으로 들어가 있음

ex) 매개변수는 있지만 , 인자값이 없는 함수
	<script>
		function test(data){
			console.log(data);
		}
	</script>
   <button onclick="test();">클릭</button>
* 매개변수도 있지만 인자값이 없으면 값이 나오지 않음

ex) 매개변수도 있고, 인자값이 있는 함수
	<script>
		function test(data){
			console.log(data);
		}
	</script>
   <button onclick="test(10);">클릭</button>
* 매개변수에 값이 전달되고 매개변수를 통해서 값을 출력할 수 있음 


## 익명 함수 ##
-> 변수에 함수를 넣어 작성하는 방법
-> 기존 선언적 함수는 만든 함수를 메모리에 바로 올려놓기 때문에 코드의 순서와는 
상관없이 호출이 가능함
-> 하지만 변수에 담기는 익명함수는 해당변수 및 함수 선언 이후에만 사용이 가능함.

ex)
 var test1 = function(){
            
        }

ex)

    <body>
        <button onclick="test();">클릭</button>
        <button onclick="test2();">클릭2</button>
    <script>
        var test2;
        var test = function(){
             alert("선언");
            test2 = function(){
                alert("test2 선언");
            }
        }
        
    </script>


## 익명 함수2 ##
-> 스스로 작동하는 함수 (별도의 호출없이 바로 실행 됨)

(function(){
	처리로직
})();

* 스스로 작동하는 익명함수는 1회용이기 때문에 리턴값을 넘길 수 없음

ex)	(function(){alert("1회용 호출");})();


## 함수 호출 ##
-> 함수는 반드시 선언(정의) 가 되어야만 실행이 가능함
-> return 값이 있으면 리턴 값을 받을 변수가 있어야함

return 값이 없는 경우 호출

함수명();

return 값이 있는 경우 호출

var 변수명 = 함수명();

*return 값이 있는 경우 값을 담을 그릇(변수)이(가) 필요함.

## 클로저 (함수 리턴) ##
-> 외부함수(자신을 포함하고 있는)의 변수에 접근할 수 있는 내부함수를 뜻함
-> 스코프체인이라고도 함
	* 스코프란? 변수가 존재하는 영역 (지역, 전역 등...)
-> 클로저는 3가지 스코프를 가짐
	- 클로저 자신에 대한 접근 (함수 자기 자신 안에 선언된 변수에 대한 접근)
	- 외부함수에서 사용되는 변수에 대한 접근
	- 전역 변수에 대한 접근

-> 클로저를 사용하게 되면 내부에서 사용하였던 지역변수를 계속 사용할 수 있게 됨
-> 클로저에서 접근되는 지역변수는 클로저를 통해야만 접근이 가능하고
	외부접근은 불가능 해짐

ex1)
-> 클로저 함수가 아니면서 값이 증가되는 코드(지역변수를 사용)

  <script>
        
        //  변수의 스코프
        function func()
        {
            var data = 1;
            console.log(data);
            data++;
        }
    </script>

ex2)
-> 클로저 함수가 아니면서 값이 증가되는 코드(전역변수를 사용)

ex)
    <script>
        
            var data = 1;
        //  변수의 스코프
        function func()
        {
            console.log(data);
            data++;// 값은 증가 시키고 유지되지만 외부에서 접근이 가능하다는 문제점이 있
        }
    </script>

ex)
// 클로저를 쓰는 목적
// 외부에서 접근은 불가능 하지만 값은 유지하고 싶을때.
    <body>
        <button onclick="incre();">버튼</button>
    <script>
        
        function func()
        {
            var data = 1;
            return function(){
                console.log(data);
                data++;
            }
        }
        var incre = func();
    </script>
    </body>

@ 내장 함수(인코딩, 디코딩)
-> 웹상에서 통신시 유니코드 문제는 오작동을 일으킬 문제가 잇어 인코딩이 필요함

escape()
-> URI 로 보내는 문자열 중 알파벳, 숫자, @,*,-,_,+, ., /을 제외한 문자열을 인코딩 처리함

unescape()
-> escape로 만들어진 값을 디코딩


endoeURI()
-> 인터넷 주소에 사용되는 문자열 인코딩
-> 알파벳, :,;,/,=,?,& 는 변환 안함

decodeURI()
-> encodeURI()로 인코딩한 문자열을 디코딩

encodeURIComponent()
-> 알파벳과 숫자를 제외한 모든 문자 인코딩

decodeURIComponent()
-> encodeURIComponent()로 인코딩한 문자열을 디코딩

## eval(String) ##
-> 문자열로 기술된 코드를 자바스크립트로 실행 함

## isFinite(number) ##
-> number(숫자) 가 맞는지를 확인하는 함수(숫자가 맞으면 true)
-> isNaN에 반대 기능
-> 단, 아무것도 없을시에도 true가 나옴

## isNaN(number) ##
-> number가 NaN 인지를 확인(숫자가 아니면 true)
	- NaN은 Not a Number의 약자
-> isFinite의 반대 기능

















































































