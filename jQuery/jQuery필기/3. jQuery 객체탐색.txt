
@ jQuery Traversing
-> jQuery Traversing 은 jQuery의 탐색(순회) 이라는 뜻
-> 특정 요소를 찾거나 필터링 하는 작업은 대부분 선택자(selector)를 사용하면 됨
-> 1차적으로 선택자에 의해 찾은 요소들을 다시 2차 필터링 하거나 새로운 요소를
추가할때에는 traverse 관련 메소드를 사용 하면 됨

* 처음 필터 처리한 요소들의 집합에서 다시 특정 요소를 찾거나 또는 필터이과 같이
추가하는 동작이라고 보면 됨


@ filtering 메소드
-> 선택자로 지정한 객체를 기준으로 객체 그룹에서 위치를 기준으로 객체 선택을 하는
메소드


## first() ##
-> 선택된 요소 중 가장 첫번째 요소를 리턴

ex) 같은 태그중에 첫번째

 <script>
      $(document).ready(function(){
        var select = $('p').first();
        select.css('color','red');
      });
  </script>


ex) 같은 클래스중에 첫번째

  <script>
      $(document).ready(function(){  
        $('.b').first().css('color','red');
      });
  </script>


## last() ##
->선택된 요소중에서 가장 마지막 요소를 리턴

ex)
 <script>
      $(document).ready(function(){  
        $('.b').last().css('color','red');
      });
  </script>00


## eq() ##
-> 인덱스 번호와 일치하는 요소 리턴(0부터 시작)

ex)  p 태그에서 2번째 (0번째부터 시작함)

  <script>
      $(document).ready(function(){  
        $('p').eq(2).css('color','red');
      });
  </script>

## filter() ##
-> 인자값과 일치하는 요소만 리턴
-> 2가지 형태로 사용
	- $(selector).filter(selector);
	- $(selector).filter(function(){});

ex)

  var $selector = $('p').filter(':even');// p 태그중 짝수번째 있는애들만.


ex) 익명 함수를 만들어서 인덱스가 짝수번째인 요소들만 적용.
  
  <script>
      $(document).ready(function(){  
            var $selector = $('p').filter(
                function(index){
                    return index%2==0;
                }
            );
            $selector.css('color','red');
      });
  </script>


ex)

 <script>
      $(document).ready(function(){  
            var $selector = $('p').filter(
                function(index){
                    return confirm();// 확인 누르면 true, 취소 누르면 false 를 리턴.
                }
            );
            $selector.css('color','red');
      });
  </script>


## not() ##
-> 인자값과 일치하지 않는 요소만 리턴

ex)

<script>
      $(document).ready(function(){  
            var $selector = $('p').not('.p');
            $selector.css('color','red');
      });
  </script>


@ Ancestors 메소드
-> 선택된 요소의 상위 요소들을 선택할 수 있는 메소드


## parent() ##
-> 선택된 요소의 바로 위(상위요소)만 리턴

ex)

 <script>
      $(document).ready(function(){  
          var $select = $('span').parent();// span 태그의 부모
          $select.css('border','2px solid red');
      });
  </script>
  <style>
      .ancestors *{
          display:block;
          border:2px solid lightgrey;
          color:black;
          padding:5px;
          margin:15px;
      }
    </style>
</head>
    <body>
         <div class="ancestors">
             <div stlye="width:500px;">
                 i'm div (great -grandparent)
                 <ul>
                     i'm ul(grandparent)
                     <li>
                         i'm li(direct parent)
                         <span>span</span>
                     </li>
                 </ul>    
             </div>
             <div style="width:500px;">
                 div(grandparent)
                 <p>
                     p(direct parent)
                     <span>span</span>
                 </p>
             </div>
         </div>
    </body>

## parents([인자]) ##
-> 선택된 요소의 모든 상위 요소 리턴
-> 매개변수가 있으면 매개변수와 일치하는 부모만 리턴

ex)

<script>
      $(document).ready(function(){  
          var $select = $('span').parents('ul');
          $select.css('border','2px solid red');
      });
  </script>


## parentsUntil([인자]) ##
-> 선택된 요소부터 인자요소까지 범위의 요소 리턴
	(선택된 요소는 제외함)

ex)

  <script>
      $(document).ready(function(){  
          var $select = $('span').parentsUntil('div');// span 위부터 div 전까지
          $select.css('border','2px solid red');
      });
  </script>
  <style>
      .ancestors *{
          display:block;
          border:2px solid lightgrey;
          color:black;
          padding:5px;
          margin:15px;
      }
    </style>
</head>
    <body>
         <div class="ancestors">
             <div stlye="width:500px;">
                 i'm div (great -grandparent)
                 <ul>
                     i'm ul(grandparent)
                     <li>
                         i'm li(direct parent)
                         <span>span</span>
                     </li>
                 </ul>    
             </div>
             <div style="width:500px;">
                 div(grandparent)
                 <p>
                     p(direct parent)
                     <span>span</span>
                 </p>
             </div>
         </div>
    </body>
</html>

@ Descendants 메소드
-> 선택된 요소의 하위 요소들을 선택할 수 있는 메소드

## children([인자]) ##
-> 선택된 요소의 모든 자손(다음 레벨) 객첼글 리턴
-> 선택된 요소의 인자와 일치하는 자손(다음 레벨) 객체 리턴

ex)
  <script>
      $(document).ready(function(){  
          var $select = $('div').children();// 직계자식들만 선택
          $select.css('border','2px solid red');
      });
  </script>


ex)
  <script>
      $(document).ready(function(){  
          var $select = $('div').children('.child1');// 직계자식들중 클래스가 child1인 자식만 선택
          $select.css('border','2px solid red');
      });
  </script>


## find(인자) ##
-> 선택된 요소의 인자와 일치하는 모든 후손 (모든 레벨) 객체 리턴

ex)

  <script>
      $(document).ready(function(){  
          var $select = $('div').find('span');// 직계자식들중 span 태그 모두
          $select.css('border','2px solid red');
      });
  </script>


## siblings([인자]) ##
-> 같은 레벨에 있는 요소(형제)를 선택할 수 있는 메소드
-> 같은 레벨에 있는 요소(형제) 중 인자와 일치하는 요소 리턴

* 자신은 제외

ex)
  
  <script>
      $(document).ready(function(){  
          var $select = $('h2').siblings();// h2를 제외한 모든 형제
          $select.css('border','2px solid red');
      });
  </script>


ex)
 <script>
      $(document).ready(function(){  
          var $select = $('h2').siblings('p');// h2를 제외한 모든 형제 중에 p태그만
          $select.css('border','2px solid red');
      });
  </script>
















































