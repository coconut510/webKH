@ CSS 란
-> Cascading Style Sheets 의 약자
-> 웹 문서의 전반적인 스타일을 미리 저장해 둔 스타일 시트
-> 기존 HTML은 다양하게 설계하고 수시로 변경하는데 많은 제약이 따름
	이를 보완하기 위해 만들어진 것이 스타일 시트
-> 문서 작성 내용과 꾸미는 부분을 분리하여 내용을 수정하여도 디자인을 바꿀
	필요가 없고, 디자인을 수정해도 글 내용을 바꿀 필요가 없어지게 만듦


스타일 시트 기본형식

ex)
<style>
p{ text-align : center;}
</style>
p		: 선택자
text-align	: stlye 속성
center		: 속성 값

* CSS 에서 가장 중요한 것은 선택자! 선택자를 잘 쓸 줄 알아야지만
	Front 개발자 입장에서 변경하고자 하는 것을 선택할 수 있음. 


@ 내부 스타일 시트
-> <style> </style> 를 사용하여 내부에 스타일 정보를 저장하는 기법
-> 내부에 스타일 시트를 정의하고 사용 하게 됨( 해당 페이지에서 계속 사용)

ex) 
<style>
	p{text-align : center;}
</style>

@ 외부 스타일 시트
-> <link> 태그를 이용하여 css파일을 읽어와 스타일을 적용
-> 외부에서 가져온 것이기 때문에 다른 페이지에서도 호출해서 사용가능

ex)
<link href="css파일경로" rel="stylesheet" type="text/css">

@ 인라인 스타일 시트
-> 태그 내부에 스타일 정보를 지정하는 방법
-> 해당 내부 태그에 정의 한 것이기 때문에 해당 태그에만 적용

ex)
<html>
	<p style="color:pink"> 인사인 스타일 시트 적용 </p>
</html>


@ CSS 선택자
-> CSS 에서는 선택자를 잘 쓰는 것이 CSS를 잘하게 되는 것 중 하나!

선택자의 종류

전체 선택자 : * 

태그 선택자 : 태그(h1, p, li 등등..)

아이디 선택자 : #아이디 명

클래스 선택자 : .클래스명

후손 선택자   : 선택자 선택자

자손 선택자   : 선택자> 선택자

속성 선택자	:선택자[속성= 값]/선택자[속성~=값]
		 선택자[속성|=값]/선택자[속성^=값]
		 선택자[속성$=값]/선택자[속성*=값]

동위 선택자 	: 선택자 + 선택자 /  선택자 ~ 선택자

수조 선택자 	:선택자 : first-child / 선택자 : last-child
		 선택자 : nth-child(수열) / 선택자 : nth-last-child(수열)
		 선택자 : first-of-type / 선택자 : last-of-type
		 선택자 : nth-of-type(수열) / 선택자 : nth-last-of-type(수열)

반응 선택자  	: 선택자:active / 선택자:hover

상태 선택자 	: :checked / :focus

속성 선택자	: :enabled / :disabled

링크 선택자 	: :link / :visited

문자 선택자 	: ::first-letter  / ::first-line
		  ::after / ::before / ::selection

부정 선택자	: 선택자:not(선택자) 

@ 전체 선택자
-> html 문서 안에 있는 모든 태그에 적용되는 스타일 선택자

기본 형식
* { 설정내용;}

* 전체 태그는 body 태그에 있는 요소뿐만 아니라 html, head에도 적용이 됨

ex) *{color : red;} 

<head>
	<style>
    	*{color: red;}
	</style>
</head>
    <body>
    <p >내용1</p>
    <span >내용2</span><br>
    <div >내용3</div>
    <h4>내용4</h4>

    </body>
</html>


@ 태그 선택자
-> 특정 태그에만 적용되는 스타일 선택자

기본형식

태그면 { 설정내용 ;}
* 여러개의 태그를 선택시에는 ','(쉼표)로 구별하여 작성

ex) p{color : red;}


@ 아이디 / 클래스 선택자
-> 아이디 선택자 : 태그 속성 id 를 설정하고 id 값을 선택자로 쓰는것(#)
-> 클래스 선택자 : 태그 속성 class 를 설정하고 class값을 선택자로 하는것(.)

기본형식

id : # 아이디명{설정내용;}
class : .클래스명{설정내용;}

* 클래스 선택자는 주옥을 허용하고 id 선택자는 중복 허용을 하지 않음
코드상에서는 에러는 없지만 javascript의 DOM에서 id값으로 페이지 요소를
가져오기 때문에 중복을 허용하지 않음

* 클래스 중복을 허용하기 때문에 영역을 명확하게 하기 위해
태그 선택자와 같이 쓰는 경우도 있음.

<!--    3가지 값(구분자)
   name : 다른 페이지로 값을 넘길때 사용하는 구분자
   id   : 태그들 끼리 구분하기 위한 구분자
   class: 그룹으로 묶어서 구분하기 위한 구분자.
   -->

<style>
    #p1{color : aqua;}
    #p2{color : blue;}
    #p3{color : greenyellow;}
    .pclass{background-color: red;}
</style>
</head>
    <body>
<!--    3가지 값(구분자)
   name : 다른 페이지로 값을 넘길때 사용하는 구분자
   id   : 태그들 끼리 구분하기 위한 구분자
   class: 그룹으로 묶어서 구분하기 위한 구분자.
   -->
    <p id="p1" class="pclass">내용1</p>
    <p id="p2">내용2</p>
    <p id="p3" class="pclass">내용3</p>
    


@ 기본 속성 성택자
-> 태그 선택자와 함께 사용하는 선택자로 뒤에 []를 사용하여 속성과 속성값을 사용

기본형식

선택자 [속성] { 설정내용;}
선택자 [속성=속성값] {설정내용;}

ex1) 선택자 [속성] { 설정내용;}
<style>
    p[name]{color : red;}
    p[id]{color : blue;}
    p[class]{color : green;}
</style>
</head>
    <body>
    <p name="p1"> 내용1</p>
    <p id="p2"> 내용2</p>
    <p class="p3"> 내용3</p>
    </body>
</html>


ex2) 선택자 [속성=속성값] {설정내용;}
<style>
    p[name=p1]{color : red;}
</style>
</head>
    <body>
    <p name="p1"> 내용1</p>
    <p name="p2"> 내용2</p>
    <p class="p3"> 내용3</p>
    </body>
</html>


@ 문자열 속성 선택자
-> 특정 문자열을 확인하여 스타일을 적용하는 방식으로 특별한 경우에만 사용

선택자[속성~=값] : 속성값이 특정 값을 단어로 포함하는 태그 선택(띄어쓰기로 구분)
선택자[속성|=값] : 속성값이 특정 값을 단어로 포함하는 태그 선택( "-"으로 구분
		(- 앞의 내용값이 동일해야함)
	-> name 이든, class이든 선언디 - 로 구성된 것 이어야 함.
p[id~="test"]{color: red;}
p[class|="class"]{background-color : yellow;}


선택자[속성^=값] : 속성값이 특정 값으로 시작하는 태그 선택
선택자[속성$=값] : 속성값이 특정 값으로 끝나는 태그 선택
선택자[속성*=값] : 속성값이 특정 값으로 포함하는 태그 선택

ex)
<style>
    p[id^="id"]{color: red;}
    p[class$="c1"]{background-color: yellow;}
    p[class*="p"]{font-weight: bold;}
</style>
</head>
    <body>
    <p name="test 1" id="i1" class="p-class-c1"> 내용1 </p>
    <p name="test 2" id="i2" class="c1"> 내용2 </p>
    <p name="test 3" id="i3" class="c1"> 내용3 </p>
    <p name="test 4" id="id4" class="c2"> 내용4 </p>
    <p name="test 5" id="id5" class="c2"> 내용5 </p>
    <p name="test 6" id="id6" class="class-p-c2"> 내용6 </p>
    <p name="etc"> 기타내용 </p>
    </body>
</html> 



@ 후손 선택자 / 자손 선택자
-> 후손은 내 아래 모든 것
-> 자손은 내 직속 아래

<body>
	<div>
		<h1></h1>
		<h2></h2>
		<ul>
			<li></li>
			<li></li>
		</ul>
	</div>
</body>

-> div 입장에서는 h1, h2, ul 태그가 자손태그
-> div 입장에서 li태그는 자손태그는 아니지만 후손 태그라고 볼수 있음.

사용법

후손선택자
-> 선택자 후손 선택자 { 설정내용;}
    #div-test h1{color : red;}

자손선택자
-> 선택자> 자손선택자 {설정내용;}
    #div-test>h1{color : red;}

* 여러개의 자손 선택 가능(선택자> 자손> 자손> 자손...)

@ 동위 선택자
-> 동위 관계에서 뒤에서 위치한 태그를 선택할 때 사용

동위선택자 a+ 동위선택자b : 동위선택자 a의 바로 뒤에 있는 한개의 선택자만 선택
<style>
    h1+p{color : red;}
</style>

동위선택자 a~ 동위선택자b : 동위선택자 a의 뒤에 있는 선택자 b 모두 선택

<style>
    h1~p{color : red;}
</style>

* 같은자손(형제) 끼리는 동위관계라고 볼수 있음.
 <div>
            <h1>형제1</h1>
            <p>형제2</p>
            <p>형제3</p>
            <ul>
                <li>조카1</li>
                <li>조카2</li>
           </ul>
</div>

ex)
<style>
    h1+p{color : red;}
</style>
</head>
    <body>
        <div>
            <h1>형제1</h1>
            <p>형제2</p>
            <p>형제3</p>
            <ul>
                <li>조카1</li>
                <li>조카2</li>
            </ul>
        </div>
    </body>
</html> 


@ 반응 선택자
-> 사용자의 움직임에 따라 달라지는 선택자

선택자 : active	-> 사용자가 클릭한 태그 선택
선택자 : hover  -> 사용자의 마우스가 올라가 있는 태그 선택

기본형식

선택자 : active {설정내용;}
선택자 : hover {설정내용;}


ex)
<style>
    p:active{color:red;}
     p:hover{background-color:yellow;}
</style>
</head>
    <body>
        <p>내용1</p>       
        <p>내용2</p>       
        <p>내용3</p>       
        <p>내용4</p>       
        <p>내용5</p>       
        <p>내용6</p>       
    </body>
</html>


@ 상태 선택자
-> 입력 양식의 상태에 따라 선택되는 선택자

input태그 : checked	-> 체크 상태의 input 태그 선택(체크가 되었다면!)
input태그 : focus	-> 초점이 맞추어진 input 태그 선택

option 태그 : enabled 	-> 사용 가능한 option 태그 선택
option 태그 : disabled	-> 사용 불가능한 option 태그 선택

ex)
<style>
    p:active{color:red;}
     p:hover{background-color:yellow; cursor:pointer;}
    input:focus{background-color: skyblue; border:5px solid blue;}
    input:checked{height: 20px;width:20px;}
    option:enabled {color:blue;}
    option:disabled{background-color: dodgerblue;}
</style>
</head>
    <body>
        <fieldset>
            <legend>정보 입력 </legend>
            이름 : <input type="text" ><br>
            나이 : <input type="text" ><br>
            성별 : 
            남자 <input type="radio" name="gender">
            여자 <input type="radio" name="gender"><br>
            취미 :
            노래<input type="checkbox">                        
            운동<input type="checkbox">                        
            공부<input type="checkbox">                        
            댄스<input type="checkbox"><br>                        
            나이 : <select>
                
                <option value="10" disabled>10대</option>
                <option value="20">20대</option>
                <option value="30">30대</option>
                <option value="40">40대</option>
                <option value="50">50대</option>
                <option value="60">60대이</option>
            </select>
        </fieldset>     
    </body>


@ 일반 구조 선택자
-> 특정한 위치에 있는 태그 선택 (위치로만 구분)
:first-child		-> 형제 관계 태그 중 첫번째 태그 선택
:last-child		-> 형제 관계 태그 중 마지막 태그 선택
:nth-child(수열)	-> 형제 관계 태그 중 앞에서 수열 번째 태그 선택
:nth-last-child(수열)	-> 형제 관계 태그 중 뒤에서 수열 번째 태그 선택


ex)
    <style>
        p:first-child{color:red;}
        p:last-child{color:blue;}
        p:nth-child(1){color:red;}
    </style>
</head>
    <body>
       <div>
           <p>내용1</p>
           <p>내용2</p>
           <p>내용3</p>
           <p>내용4</p>
       </div> 
    </body>
</html>

@ 형태 구조 선택자
-> 특정한 위치에 있는 태그 선택( 태그 별로 구분)

:first-of-type		-> 형제 관계 태그 중 첫번째 태그 선택
:last-of-type		-> 형제 관계 태그 중 마지막 태그 선택
:nth-of-type		-> 형제 관계 태그 중 앞에서 수열 번째 태그 선택
:nth-last-of-type	-> 형제 관계 태그 중 뒤에서 수열 번째 태그 선택


@ 링크 선택자
-> 링크(href)가 걸려있는 태그를 선택하는 선택자

:link		-> 방문전(링크를 가기전 상태) 링크 선택자
:visited	-> 방문후(링크를 간적 있는 상태) 링크 선택자


ex)
    <style>
        a:link{color:deepskyblue;}
        a:visited{color:greenyellow;}
    </style>
</head>
    <body>
       <div>
           <a href="http://www.naver.com">네이버</a><br>
           <a href="http://www.google.com">구글</a><br>
           <a href="http://www.daum.net">다음</a><br>
       </div> 
    </body>
</html>


@ 문자 선택자
-> 태그 내부에서 특정 조건의 문자를 선택하는 선택자

선택자::first-letter	-> 첫 번째 글자를 선택
선택자::first-line	-> 첫 번째 줄을 선택
선택자::after		-> 태그 뒤에 위치하는 공간을 선택
선택자::before		-> 태그 앞에 위치하는 공간을 선택
선택자::selection	-> 사용자가 드래그한 글자 선택

ex)
p::first-letter{color:red;}
p::first-line{color:red;}
sep::before{content:"물어보지맛!"}


@ 부정 선택자
-> 선택자를 제외한 나머지를 말함.

요소 : not(선택자)

ex)
  <style>
        p:not(#p1){color:red;}
    </style>
</head>
    <body>
       <p id="p1">내용1</p>
       <p id="p2">내용2</p>
       <p id="p3">내용3</p>
       <p id="p4">내용4</p>
       <p id="p5">내용5</p>
    </body>
</html>


@ CSS 우선 순위

## 적용 방법에 따른 우선 순위

스타일 태그 < class 스타일 < id 스타일 < 인라인 스타일 < !inportant

* !important가 가장 높은 우선 순위를 가짐


ex)
    <style>
        p{color:red;}
        .pp{color:blue;}
        #p1{color:pink;}
        p{color:red !important;}
    </style>
</head>
    <body>
       <p id="p1" class="pp" style="color:green">내용1</p>

    </body>
</html>

## 동일한 선택자 일시 우선 순위 ##
-> 나중에 작성된 스타일이 최종 적용 됨.



















