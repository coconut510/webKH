@ Server 와 Client
-> 서버(Server) 는 서비스를 제공하는 컴퓨터
-> 클라이언트(Client) 는 서비스를 제공받는 사용자 혹은 컴퓨터

ex)

예를 들어 KTX 열차를 예매하려고 할때,
KTX 열차 예매 시스템 홈페이지를 제공하는것은 서버 가 되고,
KTX 열차 예매 시스템을 이용하여 예매를 하는 사람을 클라이언트 라고 볼 수 있음
이 과정에서 클라이언트는 이용하려는 서비스를 요청하는 것(Request) 하고
요청한 것에 맞는 서비스 결과를 응답(Response)함

@ Internet에서 Service 들의 종류
-> Web, Mail, FTP, DataBase 등등...

Web Service : 클라이언트의 웹 브라우저를 통해서 서버가 제공하는 웹 페이지를
		이용할 수 있도록 해주는 서비스


@ Web의 통신 구조

	Web Server	   -		WAS	       -    DBMS Server
	(Web Page를 제공함)   (Web Application Server)   (DB를 저장 및 관리)
	(HTML, CSS,jQuery,    (JSP/Servlet,JAVA)	 (Oracle)
	JavaScript)


@ Web Server 종류
- Apache : Apache Software Foundation  에서 만든 서버로 HTTP 통신에 대한
	여러가지 라이브러리를 제공함
-> IIS (MS) : MS 사에서 만든 웹 서버로 높은 수준의 보안성과 성능을 제공( 유료)
-> NGINX : 무료 오픈 소스로 가벼움과 높은 성능을 위해 사용됨

* 이외에도 다양한 Web Server 가 존재하고 우리 과정에서는 Apache를 사용할 예정임

@ WAS?
-> Web Application Server의 약자로, 사용자가 요청한 서비스의 결과를 스크립트 언어 등으로
가공하여 생성한 동적인 페이지를 사용자에게 보여주는 역할을 함
-> DB와의 연결 고리 역할도 함

# WAS 의 종류 #
-> Tomcat : 전 세계적으로 가장 많이 사용되고 있으며 중소기업, 관공서 등에서 많이 사용
-> Jeus : 티맥스 소프트가 만든 국산으로 관리가 쉽고, 대용량의 데이터를 고성능으로 처리함
-> JBoss : 레드햇사가 만든 WAS, 현재 이름은 와일드 플라이(WildFly)로 변경하였고,
	오픈소스로써 폭 넓은 다양한 서비스를 제공함


@ DBMS
-> DataBase Management System의 약자
-> 다수의 컴퓨터, 사용자 들이 DB 안에 데이터를 기록하거나 사용할 수 있도록 해주는 시스템
-> 종류는 MySQL, MSSQL, Oracle, MariaDB, 몽고DB 등등

@ 이클립스 아파치 톰캣 설정
-> 서버에서 HTTP/1.1 포트번호 변경
-> Server Options에서 Serve Modules without publising 체크.
	( 웹페이지 원본에 작업하겠다는 의미)


@ 서블릿(Servelet)
-> 서블릿(Servelet)은 Server + Applet의 합성어
-> 서버에서 실행되는 작은 Applet 이란 의미로 자바를 이용하여 웹에서 실행되는
프로그램을 작성하는 기술
-> 서버측에서 사용될 수 있도록 확장시킨 자바 프로그램을 뜻함
-> 서블릿 실행환경을 엡 컨테이너 혹은 서블릿 컨테이너로 불림 (WAS 가 서블릿 컨테이너)
* Apple : java언어로 구성되어 웹 브라우저에서 실행되는 간단한 기능의 소규모 프로그램
* 서블릿 컨테이너 : 서블릿 객체를 보관 및 생성, 삭제 작업을 하는 공간


@ JSP
-> JSP는 Java Server Page 의 약자로써  HTML 태그와 자바코드를 합친 웹 스크립트 코드


@ 웹서버와 웹 컨테이너
-> 웹 서버는 웹 페이지를 가지고 있고, 클라이언트에게 웹 페이지를 제공해주는 서버
-> 웹 컨테이너는 또한 웹 페이지를 가지고 있는 하나의 서버 이지만
단순한 HTML, JS, CSS의 페이지만 가지고 있는 것이 아닌 서블릿, JSP 페이지도 가지고 
있는 서버

@ 서블릿 컨테이너의 역할
-> 서블릿 객체의 생명 주기를 관리( 생성, 초기화, 소멸)
-> 서블릿 객체를 생성 (HttpServletRequest, HttpServletResponse 객체)
-> 통신 커뮤니케이션을 지원
	- 서블릿( 자바코드)과 웹이 서로 통신을 할 수 있도록 도와줌
	- 만약 컨테이너가 없었다면 개발자가 직접 웹과의 통신을 위한 ServerSocket을 만들고
	특정 포트를 리스닝하고, 연결 요청이 들어오면 스트림을 만든 행위 등
	기본 네트워크 소켓처럼 코딩 작업을 해야함
	(그러나 서블릿 컨테이너가 알아서 작업 해줌)
-> 멀티스레딩 지원
	- 서블릿은 멀티스레딩을 지원하여 요청이 들어올때마다 새로운 자바 스레드를
	하나씩 만들어서 처리함
	- 클라이언트가 요청하면 HTTP 처리를 위한 메소드를 실행 하고 일이 끝나면
	자동으로 스레딩 작업이 종료됨
	- 즉, 여러명의 클라이언트들이 동시에 다양한 서비스 요청을 하여도 기다리지 않고
	문제 없이 스레딩 작업 처리를 함
	(서블릿 컨테이너가 없었다면 스레드 코드도 개발자가 하나하나 작업 해야함)
	

@ JSP 컨테이너
-> JSP 파일을 다시 java 코드(서블릿화) 로 변경해주고 class 파일로 전환하여 메모리 공간에 로드하는
작업을 해줌


@ 웹 어플리케이션의 흐름

## 자바 웹 초창기 ##

View Page		-> Servlet(서블릿) -> 자바코드(Service, DAO, VO) -> DB
(html, css, JS, jQuery)

1. View Page 를 통해 Client가 웹에 접근하여 서비스 요청(Request) 을 하게 됨
2. Client 로 부터 받은 요청을 View Page가 Servlet Page로 요청값을 보냄
	* Login 인 경우 ID, PW
3. Servlet Page 에서 자바코드를 통해 DB에 접근하여 요청에 대한 결과값을 가져옴
4. Servlet Page 에서 요청 결과에 따른 동적 처리(로그인 성공 실패)를 위한
코드 작성(HTML로 보내주어야 함) 하여 Client에서 처리 결과를 응답해줌( Response)

* 서비스 요청 종류 : 로그인, 회원가입, ID 찾기, 비밀번호 찾기, 게시판 글쓰기 등등...

* 문제가 무엇일까?
-> Servlet 페이지를 통하여 결과를 출력하려면 HTML 코드 작성을 해야 하는데
서블릿은 자바 코드이기 때문에 HTML 코드만 작성하는 것은 불가능 하다.
-> 즉, HTML 코드를 출력하기 위해서는 HTTP네 출력하는 스트림을 생성하여 
자바 코드를 이용한 HTML, 코드 출력을 해야함
-> 이렇게 되면 첫 Page 이후에 모든 페이지는 서블릿으로 작성된 페이지가 되어야 하고,
결국 웹 페이지는 자바를 할 줄 아는 사람이 HTML 페이지 개발가지 해야하는 문제가 생김
-> 결국 Front-end 개발자들은 Back-end 에서 사용되어야 하는 자바 코드까지
공부 해야만 Front 개발을 할 수 있게 됨
-> 많은 Front 개발자들이 화가 날 수 밖에 없음

* 해결책?
-> 결과적으로는 서블릿으로 해결할 수 없다!
-> 서블릿말고 다른 녀석을 생각하자!
-> 이때 등장한것이 바로 JSP
-> JSP는 HTML코드 + Java 코드를 사용할 수 있음

Servlet 코드

Member m = new MemberService().selectMember();

out.println("<html>");
out.println("<head>");
out.println("</head>");
out.println("<body>");
out.println("<h1>" + m.getId() + "</h1>");
out.println("</body>");

JSP 코드

<html>
<head>
</head>
<body>
<% Member m = new MemberService().selectMember(); %>
<% m.getId() %>
</body>
</html>


## MVC1의 등장 ##
MVC : Model, View, Controller

View Page(html, css, JS, jQuery) -> JSP(Controller) -> 자바코드(Model:Vo, Service, DAO) -> DB

1. View Page 를 통해 Client가 웹에 접근하여 서비스 요청( Request)를 하게 됨
2. Client 로 부터 받은 요청을 View Page에서 JSP페이지로 요청값을 보냄
3. JSP 는 해당 요청에 대한 처리를 자바 코드를 통해 결과 값을 받아옴
4. 해당 값을 가지고 JSP 페이지에서 결과를 보여주는 코드를 작성.

* 문제점?
-> JSP 페이지를 통하여 Java 코드와 HTML코드를 분리하여 작성 할 수 있게 되어 
퍼블리셔 입장에서는 1차적인 문제가 해결 되었음
	(기존 서블릿만으로 표현할때에는 HTML코드와 JAVA 코드를 필수로 섞어야 했음)
- 하지만, 결국은 JSP페이지 안에 JAVA코드가 없어지진 않고 사용되어야 하는
문제점이 발생함

## MVC2 등장 ##               
-> 기존에 버렸던 서블릿을 재등장 시킴

View Page		 -> Servlet -> 자바코드 -> DB
(html, css, JS, jQuery) JSP

1. View Page를 통해 Client가 웹에 접근하여 서비스를 요청(Request)
2. Client 로부터 받은 요청을 Servlet Page로 요청값을 보냄
3. Servlet Page에서 자바코드를 통해 DB에 접근하여 요청에 대한 결과를 가져옴
4. Servlet Page의 요청 결과에 따라 JSP Page로 보냄
5. JSP Page에서 응답 결과를 처리함
(자바 코드 대부분을 Servlet으로 처리하도록 만들고, JSP에는 적은 양의 자바코드만
존재하게 함)
                      


이후 front 에서 보게되는 자바코드의 양은 현저하게 줄어들지만 그래도 조금은
남아있게 되고(값 출력을 위해), 해당 자바코드 자체를 완전히 없애기 위해서
Action Tag, JSTL, EL이 추가로 등장함
* Action Tag, JSTL, EL을 사용하면 자바코드를 전혀 쓰지 않고도 데이터 출력, 표현을
할 수 있음































